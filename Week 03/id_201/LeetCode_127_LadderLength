//给定两个单词（beginWord 和 endWord）和一个字典，找到从 beginWord 到 endWord 的最短转换序列的长度。转换需遵循如下规则：
//
//
// 每次转换只能改变一个字母。
// 转换过程中的中间单词必须是字典中的单词。
//
//
// 说明:
//
//
// 如果不存在这样的转换序列，返回 0。
// 所有单词具有相同的长度。
// 所有单词只由小写字母组成。
// 字典中不存在重复的单词。
// 你可以假设 beginWord 和 endWord 是非空的，且二者不相同。
//
//
// 示例 1:
//
// 输入:
//beginWord = "hit",
//endWord = "cog",
//wordList = ["hot","dot","dog","lot","log","cog"]
//
//输出: 5
//
//解释: 一个最短转换序列是 "hit" -> "hot" -> "dot" -> "dog" -> "cog",
//     返回它的长度 5。
//
//
// 示例 2:
//
// 输入:
//beginWord = "hit"
//endWord = "cog"
//wordList = ["hot","dot","dog","lot","log"]
//
//输出: 0
//
//解释: endWord "cog" 不在字典中，所以无法进行转换。
// Related Topics 广度优先搜索


import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;

//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    /**
     *  时间复杂度为O(nk)  n:字典中单词的数量, k为word长度
     * @param beginWord
     * @param endWord
     * @param wordList
     * @return
     */
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        //每次只能变换一个字母,且每次产生的中间字符串必定在字典中,
        // 所以找从begin world开始和wordList, endWord的上一个状态也在字典里
        HashSet<String> visitedWords = new HashSet();
        LinkedList<String> beginMediums = new LinkedList<String>();
        beginMediums.add(beginWord);
        String currentStr;
        int size, step = 1;
        boolean haveEnd = false;
        while (!beginMediums.isEmpty()) {
            size = beginMediums.size();
            while (size-- > 0) {
                currentStr = beginMediums.poll();
                if (currentStr.equals(endWord))
                    return step;
                for (String str: wordList) {
                    if (!visitedWords.contains(str) && canReachEnd(currentStr, str)) {
                        visitedWords.add(str);
                        beginMediums.add(str);
                    }
                    if (!haveEnd && str.equals(endWord)) {
                        haveEnd = true;
                    }
                }
                if (false == haveEnd)
                    return 0;
            }
            step++;
        }
        return 0;
    }

    public boolean canReachEnd(String start, String end) {
        char[] startChars = start.toCharArray();
        char[] endChars = end.toCharArray();
        int changeCount = 0;
        for (int i = 0; i < startChars.length; i++) {
            if (startChars[i] != endChars[i])
                changeCount++;
            if (changeCount > 1)
                break;
        }
        return changeCount == 1;
    }

    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        HashSet<String> wordSets = new HashSet();
        LinkedList<String> beginMediums = new LinkedList<String>();
        char[] charList = new char[]{'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
                'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'y', 'w', 'x', 'y', 'z'};
        int size, step = 1;
        String changeStr;
        char[] changeChars;
        char oldChar;
        beginMediums.add(beginWord);
        for (String str: wordList)
            wordSets.add(str);
        while (!beginMediums.isEmpty()) {
            size = beginMediums.size();
            while (size-- > 0) {
                changeStr = beginMediums.poll();
                if (changeStr.equals(endWord))
                    return step;
                changeChars = changeStr.toCharArray();
                for (int i = 0; i < changeChars.length; i++) {
                    for (char j: charList) {
                        if (changeChars[i] == j)
                            continue;
                        oldChar = changeChars[i];
                        changeChars[i] = j;
                        changeStr = String.valueOf(changeChars);
                        if (wordSets.contains(changeStr)) {
                            wordSets.remove(changeStr);
                            beginMediums.add(changeStr);
                        }
                        changeChars[i] = oldChar;
                    }
                }
            }
            step++;
        }
        return 0;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
